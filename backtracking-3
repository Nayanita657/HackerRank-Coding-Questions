Its a famous question, given a chess board having N*N cells, you need to place N queens on the board in such a way that no queen attacks any other queen.

Input Format

The only line of input consists of a single integer denoting N.

Constraints

1<=N<=10

Output Format

If it is possible to place all the N queens in such a way that no queen attacks another queen, then print N lines having N integers. The integer in ith line and jth column will denote the cell (i,j) of the board and should be 1 if a queen is placed at (i,j) otherwise 0. If there are more than way of placing queens print any of them. If it is not possible to place all N queens in the desired way, then print "Not possible" (without quotes).

Sample Input 0

5
Sample Output 0

1 0 0 0 0 
0 0 1 0 0 
0 0 0 0 1 
0 1 0 0 0 
0 0 0 1 0 

****************************************************************SOLUTION*************************************************************



#include <stdbool.h>
#include <stdio.h>

  
void printSolution(int *board,int N)
{
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%d ", *((board+i*N) + j));
        printf("\n");
    }
}
  

bool isSafe(int *board, int row, int col,int N)
{
    int i, j;
  
    
    for (i = 0; i < col; i++)
        //if (board[row][i])
        if (*((board+row*N) + i))
            return false;
  
    
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        //if (board[i][j])
        if (*((board+i*N) + j))
            return false;
  
    
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        //if (board[i][j])
        if (*((board+i*N) + j))
            return false;
  
    return true;
}
  

bool solveNQUtil(int *board, int col,int N)
{
    
      
    if (col >= N)
        return true;
  
   
    for (int i = 0; i < N; i++) {
        
        if (isSafe((int *)board, i, col,N)) {
            
            //board[i][col] = 1;
            *((board+i*N) + col)=1;
  
           
            if (solveNQUtil((int *)board, col + 1,N))
                return true;
  
            
            //board[i][col] = 0; // BACKTRACK
            *((board+i*N) + col)=0;
        }
    }
  
    
    return false;
}
  

bool solveNQ()
{
    int N;
    scanf("%d",&N);
    int board[N][N];
    
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
            board[i][j]=0;
    }
    
    
    if (solveNQUtil((int *)board, 0,N) == false) {
        printf("Not possible");
        return false;
    }
    
    //transpose of matrix
    int transpose[N][N];
    for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < N; ++j) 
        {
            transpose[j][i] = board[i][j];
        }
    }
  
    printSolution((int *)transpose,N);
    return true;
}

int main()
{
    solveNQ();
    return 0;
}
